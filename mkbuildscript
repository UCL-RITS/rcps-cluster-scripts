#!/usr/bin/env python

""" # mkbuildscript

A tool for quickly making new build scripts.

Currently not even nearly complete -- just prints out a basic template script.

by Ian Kirker, 2015
"""

import sys
import argparse
import os
from datetime import date
from string import Template


parser = argparse.ArgumentParser()
parser.add_argument("--prefix=", metavar="path", action="store", default="/no/path", dest="prefix", help="prefix prefix to install package to (this is not a typo)")
parser.add_argument("-o", "--out", metavar="file", default="-", type=argparse.FileType('w'), dest="output_file", help="filename to write the modulefile to")

# Certain filenames in a package imply certain build types:
# CMakeLists.txt -- cmake
# configure and Makefile.am -- autotools
# Makefile.PL -- perl
# Setup.py -- python module
# 


file_listing_commands = dict()

file_listing_commands = {
  "zip": "unzip -Lq {filename}", # This produces extra junk like file sizes and mod times -- you might want to see if there's a Python package to handle these
  "tar.gz": "tar -tzf {filename}",
  "tar.bz2": "tar -tjf {filename}",
  "tar.xz": "tar -tZf {filename}",
  }

decompression_commands = {
  "zip": "unzip {filename}",
  "tar.gz": "tar xzf {filename}",
  "tar.bz2": "tar -xjf {filename}",
  "tar.xz":  "tar -xZf {filename}",
  }

extra_abilities = {
  "strip_rpath": "chrpath {filename}",
  "repattern_file": "sed -i -e 'sé{pattern}é{replacement}ég' {filename}"
  }
# if there's a package for manipulating elf binaries, you might want to use that instead
# if not, why not write one? :P





base_script = """

set -e                # Stop on any error
BUILD_DIR=`mktemp -d` # Make a temporary directory to build in

#######################
# Config

NAME=noname
VERSION=${VERSION:-0.0}
BUILD_VERSION_SUFFIX=${COMPILER_TAG}
PREFIX=${PREFIX:-/shared/ucl/apps/$PACKAGE_NAME/$VERSION/$BUILD_VERSION_SUFFIX}
CONF_OPTIONS=${CONF_OPTIONS:-}
SANITY_CHECK_FILES=""
SOURCES="a-${VERSION}.tar.gz"
SOURCE_MD5S="${SOURCE_MD5S:-aaaaaaaaa}"

#######################
# Grab package

cd $BUILD_DIR

for source in $SOURCES; do
  wget $source
done

#######################
# Verify

for source in $SOURCES; do
   # TODO
done

#######################
# Unpack

for source in $SOURCES; do
  tar -xf $source
done

#######################
# Build

cd $NAME-$VERSION
./configure --prefix=$PREFIX $CONF_OPTIONS
make 
make check
make install

#######################
# Sanity check files

for one_file in $SANITY_CHECK_FILES; do
  if [ ! -a "$PREFIX/$one_file" ]; then
    echo "Warning: file \"$one_file\" was not found after installation."
    exit 2
  fi
done

#######################
# Create module

mkmodule 

"""

print(base_script)
