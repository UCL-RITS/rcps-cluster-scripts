#!/usr/bin/env python

import os.path
import argparse
import mysql.connector
from mysql.connector import errorcode
from tabulate import tabulate
import validate

###############################################################
# user <username>           show all current info for this user
# contacts                  show all allowed values for poc_id
# institutes                show all allowed values for inst_id
# allusers                  show all current users
# getmmm                    show the most recent mmm username used
# recentusers <-n N>        show the n newest users (5 by default)
# getusers --project --institute --contact 
# whois --user --email --name --surname

# custom Action class, must override __call__
class ValidateUser(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        # raises a ValueError if the value is incorrect
        validate.user(values)
        setattr(namespace, self.dest, values)
# end class ValidateUser

def getargs():
    parser = argparse.ArgumentParser(description="Show data from the Thomas database. Use [positional argument -h] for more help.")
    parser.add_argument("--user", metavar="username", help="Show all current info for this user", action=ValidateUser)
    parser.add_argument("--contacts", help="Show all allowed values for contact", action='store_true')
    parser.add_argument("--institutes", help="Show all allowed values for institute", action='store_true')
    parser.add_argument("--allusers", help="Show all current users", action='store_true')
    parser.add_argument("--getmmm", help="Show the highest mmm username used", action='store_true')

    # store which subparser was used in args.subcommand
    subparsers = parser.add_subparsers(dest="subcommand")

    # the argument for subcommand recentusers
    recentusers = subparsers.add_parser("recentusers", help="show the n newest users (5 by default)")
    recentusers.add_argument("-n", type=int, default=5)

    # the arguments for subcommand getusers
    # uses default='%' so all results are kept if that constraint is not used
    getusers = subparsers.add_parser("getusers", help="Show all users with this project, institute, contact")
    getusers.add_argument("-p", "--project", dest="project", default='%', help="Project name")
    getusers.add_argument("-i", "--institute", dest="inst_ID", default='%', help="Institute ID")
    getusers.add_argument("-c", "--contact", dest="poc_ID", default='%', help="Point of Contact ID")    

    # the arguments for subcommand whois
    # not validating username as this can be partial
    whois = subparsers.add_parser("whois", help="Search for users matching the given requirements")
    whois.add_argument("-u", "--user", dest="username", default='', help="UCL username of user")
    whois.add_argument("-e", "--email", dest="email", default='', help="Email address of user")
    whois.add_argument("-n", "--name", dest="given_name", default='', help="Given name of user")
    whois.add_argument("-s", "--surname", dest="surname", default='', help="Surname of user")

    # return the arguments
    # contains only the attributes for the main parser and the subparser that was used
    return parser.parse_args()
# end getargs

# simplest possible outputting of query result
def simpleprint(cursor):
    for row in cursor:
        print (row)
    print("")

# write out results as a table with header and separators
def tableprint(cursor):
    print(tabulate(cursor, headers="keys", tablefmt="psql"))
    print("")

# show user info (not ssh key as it is huge)
def userinfo(cursor, args_dict):
    query = ("SELECT username, givenname, surname, email, creation_date, modification_date FROM users WHERE username=%(user)s")
    cursor.execute(query, args_dict)
    print("All information for {}:".format(args.user))
    tableprint(cursor)
    #simpleprint(cursor)

# show ssh key on file
def sshinfo(cursor, args_dict):
    query = ("SELECT ssh_key FROM users WHERE username=%(user)s")
    cursor.execute(query, args_dict)
    print("SSH key on file:")
    simpleprint(cursor)

# show all of user's projects and related points of contact
def projectinfo(cursor, args_dict):
    query = ("SELECT project, poc_id, creation_date, modification_date FROM projectusers WHERE username=%(user)s")
    cursor.execute(query, args_dict)
    print("User is in these projects:")
    tableprint(cursor)

# Show all points of contact
def contactsinfo(cursor):
    query = ("SELECT poc_id, poc_givenname, poc_surname, poc_email FROM pointofcontact")
    cursor.execute(query)
    print("All current Points of Contact:")
    tableprint(cursor)

# Show all institutes
def instituteinfo(cursor):
    query = ("SELECT inst_id, name FROM institutes")
    cursor.execute(query)
    print("All current institutes")
    tableprint(cursor)

# Print all existing users (username, names, email, dates but not ssh keys)
def alluserinfo(cursor):
    query = ("SELECT username, givenname, surname, email, creation_date, modification_date FROM users")
    cursor.execute(query)
    print("All current users:")
    tableprint(cursor)

# Print the n latest users (not ssh keys). Default is 5.
def recentinfo(cursor, args_dict):
    #if (args_dict.n == None):
    #    args_dict.n = 5
    query = ("SELECT username, givenname, surname, email, creation_date, modification_date FROM users ORDER BY creation_date DESC LIMIT %(n)s")
    cursor.execute(query, args_dict)
    tableprint(cursor)

# Show the most recent mmm user added 
def lastmmm(cursor):
    query = ("SELECT username, givenname, surname, email, creation_date, modification_date FROM users WHERE username LIKE 'mmm%' ORDER BY creation_date DESC LIMIT 1")
    cursor.execute(query)
    tableprint(cursor)

# Show all users in this project/inst/PoC combo
# Need to use LIKE so can match all by default with % when an option is not specified
def projectcombo(cursor, args_dict):
    query = ("""SELECT users.username, givenname, surname, email, projectusers.project, """
             """poc_id, institute_id FROM projectusers """
             """INNER JOIN users ON projectusers.username=users.username """
             """INNER JOIN projects ON projectusers.project=projects.project """
             """WHERE projectusers.project LIKE %(project)s AND institute_id LIKE %(inst_ID)s """
             """AND poc_id LIKE %(poc_ID)s""")
    cursor.execute(query, args_dict)
    tableprint(cursor)

# The literal % need to be escaped so there are %% before and after %(username)s
# The default is a blank, so ends up as %% which matches all
def whoisuser(cursor, args_dict):
    query = ("SELECT username, givenname, surname, email, creation_date, modification_date FROM users WHERE username LIKE '{}' AND email LIKE '{}' AND givenname LIKE '{}' AND surname LIKE '{}'").format("%" + args.username + "%", "%" + args.email + "%", "%" + args.given_name + "%", "%" + args.surname + "%")
    cursor.execute(query, args_dict)
    tableprint(cursor)

if __name__ == "__main__":

    try:
        args = getargs()
        # make a dictionary from args to make string substitutions doable by key name
        args_dict = vars(args)
    except ValueError as err:
        print(err)
        exit(1)

    # connect to MySQL database with read access.
    # (.thomas.cnf has readonly connection details as the default option group)

    try:
        conn = mysql.connector.connect(option_files=os.path.expanduser('~/.thomas.cnf'), database='thomas')
        cursor = conn.cursor()

        # Print all info for the given user
        if (args.user != None):
            userinfo(cursor, args_dict)
            sshinfo(cursor, args_dict)
            projectinfo(cursor, args_dict)

        # Show all allowed values for poc_id
        if (args.contacts):
            contactsinfo(cursor)       
 
        # Show all allowed values for inst_id
        if (args.institutes):
            instituteinfo(cursor)

        # Print all existing users (username, names, email, dates but not ssh keys)
        if (args.allusers):
            alluserinfo(cursor)

        # Print the n latest users (not ssh keys)
        if (args.subcommand == "recentusers"):
            recentinfo(cursor, args_dict)

        # Show the most recent mmm user added    
        if (args.getmmm):        
            lastmmm(cursor)

        # Show all users in this project/inst/PoC combo
        if (args.subcommand == "getusers"):
            projectcombo(cursor, args_dict)

        # Who is this person?
        if (args.subcommand == "whois"):
            whoisuser(cursor, args_dict)

    except mysql.connector.Error as err:
        if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
            print("Access denied: Something is wrong with your user name or password")
        elif err.errno == errorcode.ER_BAD_DB_ERROR:
            print("Database does not exist")
        else:
            print(err)
    else:
        cursor.close()
        conn.close()

