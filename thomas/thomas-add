#!/usr/bin/env python

import os.path
import argparse
import mysql.connector
from mysql.connector import errorcode

###############################################################
# -u, --user <username>
# -n, --name <givenname>
# -s, --surname <surname> (optional)
# -e, --email <institutional email address> 
# -k, --key <"ssh_key"> (quotes necessary)
#
# -p, --project <project>       initial project the user belongs to
# -c, --contact <poc_id>        short ID of the Point of Contact who approved user
# --debug			show SQL query submitted without committing the change

parser = argparse.ArgumentParser(description="manage user data in the Thomas database")
parser.add_argument("-u", "--user", metavar="username", help="UCL username of user", required=True)
parser.add_argument("-n", "--name", metavar="given_name", help="Given name of user", required=True)
parser.add_argument("-s", "--surname", metavar="surname", help="Surname of user (optional)")
parser.add_argument("-e", "--email", metavar="email_address", help="Institutional email address of user", required=True)
parser.add_argument("-k", "--key", metavar='"ssh_key"', help="User's public ssh key (quotes necessary)", required=True)

parser.add_argument("-p", "--project", metavar="project_ID", help="Initial project the user belongs to", required=True)
parser.add_argument("-c", "--contact", metavar="poc_id", help="Short ID of the user's Point of Contact", required=True)
parser.add_argument("--debug", help="Show SQL query submitted without committing the change", action='store_true')

args = parser.parse_args()
# make a dictionary from args
args_dict = vars(args)

# sanity check input
# usernames must exist and be 7 characters
if (len(args.user) != 7):
    print("Invalid username, must be 7 characters: {}".format(args.user))
    exit (1)
# look at sshpubkeys package for ssh validation eventually


# connect to MySQL database with write access.
# (.thomas.cnf has readonly connection details as the default option group)

try:
    conn = mysql.connector.connect(option_files=os.path.expanduser('~/.thomas.cnf'), option_groups='thomas_update', database='thomas')
    cursor = conn.cursor()

    # add user
    # the values will be taken from the dictionary given to cursor.execute()
    add_user = ("""INSERT INTO users SET username=%(user)s, givenname=%(name)s, """
               """email=%(email)s, ssh_key=%(key)s, creation_date=now()""")
    user_values = (args.user, args.name, args.email, args.key)
    # surname is optional so may not be inserted
    if (args.surname != None):
        add_user += ", surname=%(surname)s"

    # add information to projectusers
    add_projectuser = ("""INSERT INTO projectusers SET username=%(user)s, """
                       """project=%(project)s, poc_id=%(contact)s, creation_date=now()""")

    # takes a query string and a dictionary or tuple
    cursor.execute(add_user, args_dict)
    print(">>>> Queries being sent:")
    print(cursor.statement)
    cursor.execute(add_projectuser, args_dict)
    print (cursor.statement)

    # commit the change to the database unless we are debugging
    if (not args.debug):
        print("Committing database change")
        conn.commit()

except mysql.connector.Error as err:
    if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
        print("Access denied: Something is wrong with your user name or password")
    elif err.errno == errorcode.ER_BAD_DB_ERROR:
        print("Database does not exist")
    else:
        print(err)
else:
  cursor.close()
  conn.close()

