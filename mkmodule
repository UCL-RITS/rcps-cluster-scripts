#!/usr/bin/env python

""" # mkmodule

A tool for quickly making new module files.

by Ian Kirker, 2015
"""

import sys
import argparse
import os
from datetime import date
from string import Template


parser = argparse.ArgumentParser()
parser.add_argument("--prefix", metavar="path", action="store", default="/no/path", dest="prefix", help="prefix in the module to the absolute path to a directory")
parser.add_argument("-o", "--out", metavar="file", default="-", type=argparse.FileType('w'), dest="output_file", help="filename to write the modulefile to")
parser.add_argument("-n", "--name", metavar="name", default="no_name", dest="module_name", help="module name")
parser.add_argument("--whatis", metavar="description", default="This is a modulefile for $module_name", dest="description", help="the whatis description for the module")
parser.add_argument("--lang", metavar="[tcl|lua]", default="tcl", choices=["lua", "tcl"], dest="module_language", help="output language")
parser.add_argument("-v", "--vars", metavar="[variable[=value][,...]]", default="", dest="import_variables", help="import or set the value of variables in the module")
args = parser.parse_args()

args = dict(vars(args))

if args["prefix"] != "/no/path":
  if os.path.isdir(args["prefix"]):
    args["prefix"] = os.path.abspath(args["prefix"])
  else:
    sys.stderr.write("Error: invalid path specified to prefix option.")
    sys.exit(4)

args["user"] = os.getenv("USER")
if args["user"] == "":
  args["user"] = "(no user)"

args["date"] = date.strftime(date.today(),"%Y-%m-%d")

args["gen_line"] = sys.argv[0]

args["custom_variables"] = ""
custom_variables = args["import_variables"].split(",")
for element in custom_variables:
  element_split = element.split("=",1)
  if len(element_split) == 1 and not element_split[0] == "":
    args["custom_variables"] = "%s\nsetenv %15ls %15ls" % (args["custom_variables"], element_split[0], os.getenv(element_split[0]))
  elif len(element_split) == 2 and not element_split[0] == "":
    args["custom_variables"] = "%s\nsetenv %15ls %15ls" % (args["custom_variables"], element_split[0], element_split[1])




if args["module_language"] == "lua":
  sys.stderr.write("Error: Lua output is not yet implemented.")
  sys.exit(5)

module_templates = dict()
module_templates["tcl"] = """#%Module -*- tcl -*-
##
## $module_name
##
## generated by $user on $date
## using cmd line:
##  $gen_line

set module_name $module_name

proc ModulesHelp { } {

  puts stderr {${description}}

}

module-whatis "${description}"

set              prefix               $prefix
$custom_variables

if { [file isdirectory $$prefix/bin] } then {
  append-path      PATH                 $$prefix/bin
}

if { [file isdirectory $$prefix/man] } then {
  append-path      MANPATH              $$prefix/man
}

if { [file isdirectory $$prefix/lib] } then {
  append-path      LIBRARY_PATH         $$prefix/lib
  append-path      LD_LIBRARY_PATH      $$prefix/lib
}

if { [file isdirectory $$prefix/lib64] } then {
  append-path      LIBRARY_PATH         $$prefix/lib64
  append-path      LD_LIBRARY_PATH      $$prefix/lib64
}

if { [file isdirectory $$prefix/include] } then {
  append-path      CPATH                $$prefix/include
  append-path      INCLUDE_PATH         $$prefix/include
}

"""


output_text = Template( module_templates[ args["module_language"] ]).substitute(args)

args["output_file"].write(output_text)

args["output_file"].close()


